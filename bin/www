#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-sequelize');
var http = require('http');
var socket = require('socket.io');
var models = require('../models');
var passportSocketIo = require('passport.socketio');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);

var io = socket(server);
io.use(passportSocketIo.authorize({
  secret: 'SharingIsCaring1',
  store: app.session_store
}));
var chatSocket = io.of('/chat');
io.on('connection', function(socket) {
  var user = socket.request.user;
  if (app.socket_map[user.id] == null) {
    app.socket_map[user.id] = [socket];
  } else {
    app.socket_map[user.id].push(socket);
  }
  socket.on('disconnect', function() {
      var i = app.socket_map[user.id].indexOf(socket);
      app.socket_map[user.id].splice(i, 1);
  });
});

models.sequelize.sync({alter: true}).then(function() {
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port, function() {
        debug('Express server listening on port ' + server.address().port);
        });
    server.on('error', onError);
    server.on('listening', onListening);
    });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
